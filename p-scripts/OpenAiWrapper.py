from g4f.client import Client
from typing import Union
import json
from OpenAiTestNN import get_open_ai_response

def _get_gpt_response(**kwargs) -> str:
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT """
    try:
        gpt_answer = kwargs["gpt_ask_client"].chat.completions.create(
            model=kwargs["gpt_model"],
            messages=[{"role": kwargs["user_role"], "content": kwargs["content"]}]
        )
        return gpt_answer.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {str(e)}"

def ask_gpt_for_a_response(user_input: Union[list[str], str],
                           gpt_models: Union[list[str], str],
                           user_role: str = "user") -> dict:
    """ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT """
    gpt_ask_client = Client()

    if isinstance(gpt_models, str):
        gpt_model = gpt_models
    else:
        return {"error": "gpt_models –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ GPT)."}

    try:
        res = get_open_ai_response()
    except Exception:
        res = _get_gpt_response(
            gpt_ask_client=gpt_ask_client,
            gpt_model=gpt_model,
            user_role=user_role,
            content=user_input
        )

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç
    return {"response": res}

# üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤
if __name__ == "__main__":
    user_input = "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–æ—Ä–¥–∞ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?"
    model = "gpt-4o-mini"
    response = ask_gpt_for_a_response(user_input, model)
    print(json.dumps(response, ensure_ascii=False, indent=4))  # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ JSON
